function x(){}function k(t,n){for(const e in n)t[e]=n[e];return t}function C(t){return!!t&&(typeof t=="object"||typeof t=="function")&&typeof t.then=="function"}function w(t){return t()}function M(){return Object.create(null)}function j(t){t.forEach(w)}function A(t){return typeof t=="function"}function B(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}function F(t){return Object.keys(t).length===0}function E(t,...n){if(t==null){for(const o of n)o(void 0);return x}const e=t.subscribe(...n);return e.unsubscribe?()=>e.unsubscribe():e}function P(t,n,e){t.$$.on_destroy.push(E(n,e))}function S(t,n,e,o){if(t){const r=y(t,n,e,o);return t[0](r)}}function y(t,n,e,o){return t[1]&&o?k(e.ctx.slice(),t[1](o(n))):e.ctx}function U(t,n,e,o){if(t[2]&&o){const r=t[2](o(e));if(n.dirty===void 0)return r;if(typeof r=="object"){const a=[],_=Math.max(n.dirty.length,r.length);for(let u=0;u<_;u+=1)a[u]=n.dirty[u]|r[u];return a}return n.dirty|r}return n.dirty}function D(t,n,e,o,r,a){if(r){const _=y(n,e,o,a);t.p(_,r)}}function G(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let o=0;o<e;o++)n[o]=-1;return n}return-1}function H(t,n,e){return t.set(e),n}let f;function d(t){f=t}function l(){if(!f)throw new Error("Function called outside component initialization");return f}function I(t){l().$$.on_mount.push(t)}function J(t){l().$$.after_update.push(t)}function K(t,n){return l().$$.context.set(t,n),n}function L(t){return l().$$.context.get(t)}const i=[],g=[];let s=[];const b=[],m=Promise.resolve();let p=!1;function O(){p||(p=!0,m.then(v))}function N(){return O(),m}function q(t){s.push(t)}const h=new Set;let c=0;function v(){if(c!==0)return;const t=f;do{try{for(;c<i.length;){const n=i[c];c++,d(n),z(n.$$)}}catch(n){throw i.length=0,c=0,n}for(d(null),i.length=0,c=0;g.length;)g.pop()();for(let n=0;n<s.length;n+=1){const e=s[n];h.has(e)||(h.add(e),e())}s.length=0}while(i.length);for(;b.length;)b.pop()();p=!1,h.clear(),d(t)}function z(t){if(t.fragment!==null){t.update(),j(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(q)}}function Q(t){const n=[],e=[];s.forEach(o=>t.indexOf(o)===-1?n.push(o):e.push(o)),e.forEach(o=>o()),s=n}export{K as A,H as B,l as a,d as b,P as c,J as d,g as e,v as f,L as g,M as h,C as i,A as j,F as k,q as l,Q as m,x as n,I as o,f as p,w as q,j as r,B as s,N as t,i as u,O as v,S as w,D as x,G as y,U as z};
